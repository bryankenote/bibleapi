// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bible/v1/bible.proto

package biblev1connect

import (
	v1 "github.com/bryankenote/bibleapi/src/codegen/pb/bible/v1"
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BibleServiceName is the fully-qualified name of the BibleService service.
	BibleServiceName = "bible.v1.BibleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BibleServiceGetChapterProcedure is the fully-qualified name of the BibleService's GetChapter RPC.
	BibleServiceGetChapterProcedure = "/bible.v1.BibleService/GetChapter"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	bibleServiceServiceDescriptor          = v1.File_bible_v1_bible_proto.Services().ByName("BibleService")
	bibleServiceGetChapterMethodDescriptor = bibleServiceServiceDescriptor.Methods().ByName("GetChapter")
)

// BibleServiceClient is a client for the bible.v1.BibleService service.
type BibleServiceClient interface {
	GetChapter(context.Context, *connect.Request[v1.GetChapterRequest]) (*connect.Response[v1.GetChapterResponse], error)
}

// NewBibleServiceClient constructs a client for the bible.v1.BibleService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBibleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BibleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bibleServiceClient{
		getChapter: connect.NewClient[v1.GetChapterRequest, v1.GetChapterResponse](
			httpClient,
			baseURL+BibleServiceGetChapterProcedure,
			connect.WithSchema(bibleServiceGetChapterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// bibleServiceClient implements BibleServiceClient.
type bibleServiceClient struct {
	getChapter *connect.Client[v1.GetChapterRequest, v1.GetChapterResponse]
}

// GetChapter calls bible.v1.BibleService.GetChapter.
func (c *bibleServiceClient) GetChapter(ctx context.Context, req *connect.Request[v1.GetChapterRequest]) (*connect.Response[v1.GetChapterResponse], error) {
	return c.getChapter.CallUnary(ctx, req)
}

// BibleServiceHandler is an implementation of the bible.v1.BibleService service.
type BibleServiceHandler interface {
	GetChapter(context.Context, *connect.Request[v1.GetChapterRequest]) (*connect.Response[v1.GetChapterResponse], error)
}

// NewBibleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBibleServiceHandler(svc BibleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bibleServiceGetChapterHandler := connect.NewUnaryHandler(
		BibleServiceGetChapterProcedure,
		svc.GetChapter,
		connect.WithSchema(bibleServiceGetChapterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bible.v1.BibleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BibleServiceGetChapterProcedure:
			bibleServiceGetChapterHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBibleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBibleServiceHandler struct{}

func (UnimplementedBibleServiceHandler) GetChapter(context.Context, *connect.Request[v1.GetChapterRequest]) (*connect.Response[v1.GetChapterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bible.v1.BibleService.GetChapter is not implemented"))
}
